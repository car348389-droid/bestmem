import requests
import subprocess
import json
import feedparser
import time
import os
from sql import init_db, save_video_id, get_all_video_ids, update_video_status

RAPIDAPI_HOST = "youtube-mp4-mp3-downloader.p.rapidapi.com"
RAPIDAPI_KEY = "3a1024cc78msh53c77f4992c0ed9p1b62f6jsnc027eb0021d0"

headers = {
    "x-rapidapi-host": RAPIDAPI_HOST,
    "x-rapidapi-key": RAPIDAPI_KEY
}


def download_youtube_video(video_id: str, output_file: str, poll_interval: int = 5, timeout: int = 300):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç YouTube-–≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ RapidAPI –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª."""
    download_url = f"https://{RAPIDAPI_HOST}/api/v1/download"
    params = {
        "format": "720",
        "id": video_id,
        "audioQuality": "128",
        "addInfo": "false"
    }

    print(f"üé¨ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è {video_id}...")
    resp_download = requests.get(download_url, headers=headers, params=params)
    resp_json = resp_download.json()
    print("–û—Ç–≤–µ—Ç download:", resp_json)

    progress_id = resp_json.get("progressId")
    if not progress_id:
        raise ValueError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å progressId")

    # –û–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_url = f"https://{RAPIDAPI_HOST}/api/v1/progress"
    params_progress = {"id": progress_id}
    elapsed = 0
    download_link = None

    print("‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞...")
    while elapsed < timeout:
        resp_progress = requests.get(progress_url, headers=headers, params=params_progress)
        progress_json = resp_progress.json()
        print("–û—Ç–≤–µ—Ç progress:", progress_json)

        if progress_json.get("finished"):
            download_link = progress_json.get("downloadUrl")
            if download_link:
                break
        time.sleep(poll_interval)
        elapsed += poll_interval

    if not download_link:
        raise TimeoutError(f"‚ùå –í–∏–¥–µ–æ –Ω–µ –≥–æ—Ç–æ–≤–æ –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    print(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º: {download_link}")
    with requests.get(download_link, stream=True) as r:
        r.raise_for_status()
        with open(output_file, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
    print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {output_file}")


def get_video_duration(video_path: str) -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
    cmd = [
        'ffprobe',
        '-v', 'error',
        '-select_streams', 'v:0',
        '-show_entries', 'format=duration',
        '-of', 'default=noprint_wrappers=1:nokey=1',
        video_path
    ]
    result = subprocess.run(cmd, capture_output=True, text=True)
    if result.returncode != 0 or not result.stdout.strip():
        raise RuntimeError(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {result.stderr}")
    return float(result.stdout.strip())


def concat_videos(video1, video2, output_video):
    """–°–∫–ª–µ–∏–≤–∞–µ—Ç –¥–≤–∞ –≤–∏–¥–µ–æ –≤ –æ–¥–Ω–æ."""
    list_file = "videos_to_concat.txt"
    with open(list_file, "w") as f:
        f.write(f"file '{os.path.abspath(video1)}'\n")
        f.write(f"file '{os.path.abspath(video2)}'\n")

    cmd = [
        "ffmpeg",
        "-f", "concat",
        "-safe", "0",
        "-i", list_file,
        "-c", "copy",
        "-y",
        output_video
    ]
    subprocess.run(cmd, check=True)
    print(f"üéûÔ∏è –í–∏–¥–µ–æ {video1} –∏ {video2} —Å–∫–ª–µ–µ–Ω—ã –≤ {output_video}")


def main():
    init_db()

    # üîπ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∏–∑ –±–∞–∑—ã
    video_ids = get_all_video_ids()
    if not video_ids:
        print("‚ö†Ô∏è –ù–µ—Ç –≤–∏–¥–µ–æ ID –≤ –±–∞–∑–µ.")
        return

    first_video_id = video_ids[0]
    download_youtube_video(first_video_id, "main.mp4")
    duration = get_video_duration("main.mp4")
    print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ: {duration:.2f} —Å–µ–∫")

    if duration >= 60:
        print("‚úÖ –í–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ res.mp4 –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        os.rename("main.mp4", "res.mp4")
    else:
        print("‚ö†Ô∏è –í–∏–¥–µ–æ –∫–æ—Ä–æ—á–µ 1 –º–∏–Ω—É—Ç—ã ‚Äî —Å–∫–∞—á–∏–≤–∞–µ–º –µ—â—ë –æ–¥–Ω–æ –¥–ª—è —Å–∫–ª–µ–π–∫–∏.")
        if len(video_ids) < 2:
            print("‚ùå –ù–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–ª–µ–π–∫–∏.")
            os.rename("main.mp4", "res.mp4")
            return

        second_video_id = video_ids[1]
        download_youtube_video(second_video_id, "second.mp4")
        concat_videos("main.mp4", "second.mp4", "res.mp4")

    print("üèÅ –ì–æ—Ç–æ–≤–æ: —Ñ–∞–π–ª res.mp4 —Å–æ–∑–¥–∞–Ω.")


if __name__ == "__main__":
    main()
